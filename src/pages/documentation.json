 [{
         "id": 1000,
         "title": "jero Documentation",
         "description": "A lightweight JavaScript library for creating custom components.",
         "sections": [{
                 "heading": "Introduction",
                 "content": "jero is a lightweight JavaScript library that enables you to define custom components with an easy-to-use API. It is designed to be simple yet powerful, allowing you to create interactive components that can manage their own state, handle lifecycle events, and interact with the DOM effortlessly."
             },
             {
                 "heading": "Getting Started",
                 "content": "To get started with jero, include the library in your HTML file by adding the following script tag:",
                 "code": "<script src=\"https://unpkg.com/jero@1.0.25/dist/jero.js\"></script>",
                 "language": "html"
             },
             {
                 "heading": "Creating a Custom Component",
                 "content": "You can create a custom component using the jero.default function. Below is an example that demonstrates how to define a component called <my-custom-component>:",
                 "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>jero Example</title>\n  <script src=\"https://unpkg.com/jero@1.0.25/dist/jero.js\"></script>\n</head>\n<body>\n\n<my-custom-component data-message=\"Hello from Attribute\"></my-custom-component>\n\n<script>\n  jero.default('my-custom-component', function (component) {\n    component.state = { message: \"Hello, World!\" };\n\n    component.handlePageEnter = () => {\n      console.log(\"Page entered.\");\n    };\n\n    component.handlePageLeave = () => {\n      console.log(\"Page left.\");\n    };\n\n    component.handleUpdateButtonClick = function () {\n      this.setState({ message: \"Hello from the updated state!\" });\n    };\n\n    return () => `\n      <div>\n        <h1>${component.state.message}</h1>\n        <input type=\"text\" data-bind=\"message\" />\n        <button data-on=\"click: handleUpdateButtonClick\">Update Message</button>\n        <p>Attribute value: ${component.getAttributeData(\"data-message\") || \"N/A\"}</p>\n      </div>\n    `;\n  });\n</script>\n\n</body>\n</html>",
                 "language": "html"
             }
         ]
     },



     {
         "id": 11,
         "title": "Understanding TypeScript: Types and Basics",
         "description": "An in-depth introduction to TypeScript, focusing on its type system, key features, and fundamental concepts.",
         "sections": [{
                 "heading": "Introduction",
                 "content": "TypeScript is a statically typed superset of JavaScript that enhances development by providing type safety, improved tooling, and better maintainability. It helps catch errors early and makes code easier to understand. TypeScript compiles down to JavaScript, allowing it to run anywhere JavaScript does."

             },
             {
                 "heading": "Why Use TypeScript?",
                 "content": "TypeScript offers features such as static type checking, interfaces, generics, and better IDE support. These features make it easier to build large-scale applications and maintain codebases efficiently. Some key benefits of TypeScript include:\n\n1. **Early error detection** – Catch type-related errors before runtime.\n2. **Improved code readability** – Makes it easier to understand code structures.\n3. **Better tooling** – Works seamlessly with modern editors like VS Code.\n4. **Enhanced JavaScript features** – Provides features like interfaces, enums, and generics.\n5. **Scalability** – Helps manage large codebases efficiently.",
                 "language": "typescript"
             },
             {
                 "heading": "Basic Types",
                 "content": "TypeScript introduces several basic types to provide better type safety.",
                 "code": "let isDone: boolean = true;\nlet age: number = 25;\nlet name: string = 'Alice';\nlet list: number[] = [1, 2, 3];\nlet anotherList: Array<number> = [4, 5, 6];",
                 "language": "typescript"
             },
             {
                 "heading": "Type Inference",
                 "content": "TypeScript can automatically infer types based on the assigned value, reducing the need for explicit type annotations.",
                 "code": "let message = 'Hello, TypeScript!'; // Inferred as string\nlet count = 10; // Inferred as number\nlet isAvailable = false; // Inferred as boolean",
                 "language": "typescript"
             },
             {
                 "heading": "Functions and Parameter Types",
                 "content": "TypeScript allows you to define function parameter and return types for better safety.",
                 "code": "function greet(name: string): string {\n  return `Hello, ${name}`;\n}\nconsole.log(greet('Alice'));\n\n// Function with optional parameters\ntype User = { name: string; age?: number };\nfunction showUser(user: User): void {\n  console.log(user.name);\n}\nshowUser({ name: 'John' });",
                 "language": "typescript"
             },
             {
                 "heading": "Objects and Interfaces",
                 "content": "You can define structured objects using interfaces, making code more readable and maintainable.",
                 "code": "interface Person {\n  name: string;\n  age: number;\n  isEmployed?: boolean;\n}\nconst user: Person = { name: 'John', age: 30 };\nconsole.log(user.name);",
                 "language": "typescript"
             },
             {
                 "heading": "Tuples",
                 "content": "Tuples are a special type that allows arrays with a fixed number of elements, where each element has a specific type.",
                 "code": "let person: [string, number] = ['Alice', 30];\nconsole.log(person[0]); // Alice\nconsole.log(person[1]); // 30",
                 "language": "typescript"
             },
             {
                 "heading": "Enums",
                 "content": "Enums allow you to define a set of named constants, improving readability and maintainability.",
                 "code": "enum Direction {\n  Up = 1,\n  Down,\n  Left,\n  Right\n}\nlet move: Direction = Direction.Up;\nconsole.log(move); // 1",
                 "language": "typescript"
             },
             {
                 "heading": "Generics",
                 "content": "Generics enable you to write reusable and flexible components while maintaining strong typing.",
                 "code": "function identity<T>(arg: T): T {\n  return arg;\n}\nconsole.log(identity<string>('Hello')); // 'Hello'\nconsole.log(identity<number>(100)); // 100",
                 "language": "typescript"
             },
             {
                 "heading": "Type Assertions",
                 "content": "Type assertions allow you to tell the TypeScript compiler to treat a value as a specific type.",
                 "code": "let someValue: any = 'This is a string';\nlet strLength: number = (someValue as string).length;\nconsole.log(strLength);",
                 "language": "typescript"
             },
             {
                 "heading": "Union and Intersection Types",
                 "content": "TypeScript allows you to define types that accept multiple values using union (`|`) and intersection (`&`) types.",
                 "code": "type StringOrNumber = string | number;\nlet value: StringOrNumber;\nvalue = 'Hello'; // Valid\nvalue = 10; // Valid\n\ninterface A { a: string; }\ninterface B { b: number; }\ntype C = A & B;\nconst obj: C = { a: 'Hello', b: 42 };",
                 "language": "typescript"
             },
             {
                 "heading": "Advanced Types",
                 "content": "TypeScript provides utility types like `Partial`, `Pick`, and `Readonly` for working with objects more efficiently.",
                 "code": "interface User {\n  name: string;\n  age: number;\n}\ntype PartialUser = Partial<User>; // All properties are optional\ntype ReadonlyUser = Readonly<User>; // All properties are readonly\n",
                 "language": "typescript"
             },
             {
                 "heading": "TypeScript vs JavaScript",
                 "content": "Although TypeScript and JavaScript share many similarities, TypeScript offers additional advantages:\n\n1. **Static Typing** – TypeScript enforces type safety, whereas JavaScript is dynamically typed.\n2. **Compilation** – TypeScript code needs to be compiled to JavaScript before running.\n3. **Advanced Features** – TypeScript includes interfaces, enums, generics, and advanced type manipulation.\n4. **Better Tooling** – TypeScript offers better support in IDEs, leading to fewer runtime errors."

             },
             {
                 "heading": "Setting Up TypeScript",
                 "content": "To start using TypeScript, follow these steps:\n\n1. Install TypeScript globally:\n   ```bash\n   npm install -g typescript\n   ```\n2. Create a TypeScript file (`.ts`) and write your code.\n3. Compile the TypeScript file to JavaScript using the TypeScript compiler:\n   ```bash\n   tsc yourfile.ts\n   ```\n4. Run the compiled JavaScript file in your preferred environment."
             }

         ]
     }





 ]