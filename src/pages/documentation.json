 [
    {
    "id":1000,
    "title": "jero Documentation created by (OSAMUYI ERO)",
    "description": "A lightweight JavaScript library for creating custom components.",
    "sections": [
      {
        "heading": "Introduction",
        "content": "jero is a lightweight JavaScript library that enables you to define custom components with an easy-to-use API. It is designed to be simple yet powerful, allowing you to create interactive components that can manage their own state, handle lifecycle events, and interact with the DOM effortlessly."
      },
      {
        "heading": "Getting Started",
        "content": "To get started with jero, include the library in your HTML file by adding the following script tag:",
        "code": "<script src=\"https://unpkg.com/jero@1.0.25/dist/jero.js\"></script>"
      },
      {
        "heading": "Creating a Custom Component",
        "content": "You can create a custom component using the jero.default function. Below is an example that demonstrates how to define a component called <my-custom-component>:",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>jero Example</title>\n  <script src=\"https://unpkg.com/jero@1.0.25/dist/jero.js\"></script>\n</head>\n<body>\n\n<my-custom-component data-message=\"Hello from Attribute\"></my-custom-component>\n\n<script>\n  jero.default('my-custom-component', function (component) {\n    component.state = { message: \"Hello, World!\" };\n\n    component.handlePageEnter = () => {\n      console.log(\"Page entered.\");\n    };\n\n    component.handlePageLeave = () => {\n      console.log(\"Page left.\");\n    };\n\n    component.handleUpdateButtonClick = function () {\n      this.setState({ message: \"Hello from the updated state!\" });\n    };\n\n    return () => `\n      <div>\n        <h1>${component.state.message}</h1>\n        <input type=\"text\" data-bind=\"message\" />\n        <button data-on=\"click: handleUpdateButtonClick\">Update Message</button>\n        <p>Attribute value: ${component.getAttributeData(\"data-message\") || \"N/A\"}</p>\n      </div>\n    `;\n  });\n</script>\n\n</body>\n</html>"
      }
    ]
  },
  
    {
      "id": 1,
      "title": "C# HOME",
      "description": "Welcome to the C# tutorial homepage. This tutorial covers everything from the basics of C# programming to advanced topics like object-oriented programming and more.",
      "sections":[]
    },
    {
      "id": 2,
      "title": "C# Intro",
      "description": "Learn about C#, its history, and how it has become a top choice for developing software applications across various platforms.",
      "sections": [
        {
          "id": 1,
          "heading": "What is C#?",
          "content": "C# is a general-purpose, object-oriented programming language developed by Microsoft. It is part of the .NET framework and is commonly used for building web, desktop, and mobile applications.",
          "examples": [
            "C# is used in various applications such as ASP.NET web applications, Unity game development, and Windows desktop software."
          ],
          "subsections": [
            {
              "id": 1,
              "subheading": "History of C#",
              "content": "C# was created by Anders Hejlsberg and was first released in 2000 as part of the .NET framework. It has since become one of the most popular programming languages for developing Windows-based applications and web services."
            },
            {
              "id": 2,
              "subheading": "C# in Modern Development",
              "content": "C# has evolved into a multi-platform language, with support for web, mobile, and cloud applications. With the advent of .NET Core, C# can now be used on Linux, macOS, and Windows."
            }
          ]
        },
        {
          "id": 2,
          "heading": "Why Learn C#?",
          "content": "C# is versatile and easy to learn. It has a rich set of features, including support for modern programming paradigms like object-oriented programming (OOP), LINQ (Language Integrated Query), async programming, and more.",
          "tips": "Learning C# is a great entry point for developers aiming to work with the Microsoft ecosystem, including Azure, .NET Core, and Xamarin."
        }
      ]
    },
    {
      "id": 3,
      "title": "C# Get Started",
      "description": "Get started with C# by setting up your development environment and writing your first program.",
      "sections": [
        {
          "id": 1,
          "heading": "Setting Up",
          "content": "To get started with C# development, install Visual Studio or Visual Studio Code. You'll also need to install the .NET SDK to compile and run C# applications.",
          "tips": "Visual Studio is recommended for beginners as it provides a comprehensive set of features and tools for development."
        },
        {
          "id": 2,
          "heading": "Writing Your First Program",
          "content": "Create a simple C# program that prints 'Hello, World!' to the console. This program introduces you to the basic structure of a C# application.",
          "code": "using System;\n\nclass Program {\n  static void Main() {\n    Console.WriteLine(\"Hello, World!\");\n  }\n}"
        }
      ]
    },
    {
      "id": 4,
      "title": "C# Basics",
      "description": "Learn the core concepts and syntax of C# programming.",
      "sections": [
        {
          "id": 1,
          "heading": "C# Syntax",
          "content": "C# syntax is similar to other C-style languages like C++ and Java. It is structured with classes, methods, and statements that form the building blocks of C# applications.",
          "examples": [
            "A basic C# program starts with a class definition and contains the `Main` method, which is the entry point of any C# program."
          ]
        },
        {
          "id": 2,
          "heading": "C# Output",
          "content": "Use the `Console.WriteLine()` method to output data to the console. This is essential for displaying information and debugging your code.",
          "code": "Console.WriteLine(\"This is a C# tutorial.\");"
        },
        {
          "id": 3,
          "heading": "C# Comments",
          "content": "Comments are important for documenting code. C# supports single-line (`//`) and multi-line (`/* */`) comments.",
          "examples": [
            "Single-line comment: `// This is a single-line comment`",
            "Multi-line comment: `/* This is a multi-line comment */`"
          ]
        }
      ]
    },
    {
      "id": 5,
      "title": "C# Variables and Data Types",
      "description": "Learn how to declare and work with variables in C# and understand different data types.",
      "sections": [
        {
          "id": 1,
          "heading": "Variables",
          "content": "Variables are used to store data. In C#, you must specify a type when declaring a variable, such as `int`, `string`, or `bool`.",
          "code": "int age = 25;\nstring name = \"John\";"
        },
        {
          "id": 2,
          "heading": "Data Types",
          "content": "C# has several built-in data types, including value types like `int`, `double`, `bool`, and reference types like `string` and `object`.",
          "examples": [
            "`int` is used for integers, `double` is used for floating-point numbers, and `bool` is used for true/false values."
          ]
        },
        {
          "id": 3,
          "heading": "Type Casting",
          "content": "Type casting allows you to convert one type to another. There are two types: implicit and explicit casting.",
          "code": "int num = 10;\ndouble result = (double)num; // explicit casting"
        }
      ]
    },
    {
      "id": 6,
      "title": "C# Control Flow",
      "description": "Learn how to control the flow of your program using conditional statements and loops.",
      "sections": [
        {
          "id": 1,
          "heading": "If...Else",
          "content": "Use `if` and `else` statements to perform conditional checks. You can also use `else if` to check multiple conditions.",
          "code": "if (age >= 18) {\n  Console.WriteLine(\"Adult\");\n} else {\n  Console.WriteLine(\"Not an adult\");\n}"
        },
        {
          "id": 2,
          "heading": "Switch",
          "content": "The `switch` statement is used to evaluate one value against multiple cases, providing an alternative to multiple `if` statements.",
          "code": "switch (day) {\n  case 1: Console.WriteLine(\"Monday\"); break;\n  case 2: Console.WriteLine(\"Tuesday\"); break;\n  default: Console.WriteLine(\"Invalid day\"); break;\n}"
        },
        {
          "id": 3,
          "heading": "Loops",
          "content": "Loops help you repeat tasks. C# supports `for`, `while`, and `foreach` loops for different scenarios.",
          "examples": [
            "Use a `for` loop to iterate through an array.",
            "Use a `foreach` loop to iterate over a collection."
          ],
          "subsections": [
            {
              "id": 1,
              "subheading": "For Loop Example",
              "content": "A for loop is useful when you know how many times you need to iterate.",
              "examples": [
                "int[] nums = { 1, 2, 3, 4, 5 };\nfor (int i = 0; i < nums.Length; i++) {\n  Console.WriteLine(nums[i]);\n}"
              ]
            },
            {
              "id": 2,
              "subheading": "Foreach Loop Example",
              "content": "A foreach loop is useful for iterating over a collection without needing to manage the index manually.",
              "examples": [
                "foreach (int num in nums) {\n  Console.WriteLine(num);\n}"
              ]
            }
          ]
        }
      ]
    },
    
    {
      "id": 7,
      "title": "C# Methods",
      "description": "Learn how to define and use methods in C# to make your code modular and reusable.",
      "sections": [
        {
          "id": 1,
          "heading": "Defining Methods",
          "content": "Methods are blocks of code that perform specific tasks. Methods can be called by their name and can take parameters.",
          "code": "void Greet() {\n  Console.WriteLine(\"Hello, World!\");\n}"
        },
        {
          "id": 2,
          "heading": "Method Parameters",
          "content": "Methods can accept input parameters, allowing you to pass values to them when calling the method.",
          "code": "void Greet(string name) {\n  Console.WriteLine($\"Hello, {name}!\");\n}"
        },
        {
          "id": 3,
          "heading": "Method Overloading",
          "content": "You can define multiple methods with the same name, as long as they have different parameters (number or type).",
          "code": "int Add(int a, int b) => a + b;\ndouble Add(double a, double b) => a + b;"
        }
      ]
    },
    {
      "id": 8,
      "title": "C# OOP",
      "description": "Understand the key concepts of Object-Oriented Programming (OOP) in C#.",
      "sections": [
        {
          "id": 1,
          "heading": "Classes and Objects",
          "content": "A class is a blueprint for creating objects. An object is an instance of a class.",
          "code": "class Car {\n  public string Brand { get; set; }\n}\n\nCar myCar = new Car { Brand = \"Toyota\" };"
        },
        {
          "id": 2,
          "heading": "Inheritance",
          "content": "Inheritance allows one class to inherit members (fields, methods) from another class.",
          "code": "class Vehicle {\n  public string Brand { get; set; }\n}\n\nclass Car : Vehicle {\n  public int Wheels { get; set; }\n}"
        }
      ]
    },


    {
        "id": 40,
        "title": "C# Loops",
        "description": "Learn about different loop structures in C# that allow you to repeat a block of code multiple times.",
        "sections": [
          {
            "id": 1,
            "heading": "For Loop",
            "content": "The 'for' loop is used when you know the number of iterations in advance. It consists of three parts: initialization, condition, and iteration.",
            "code": "for (int i = 0; i < 5; i++) {\n  Console.WriteLine(i);\n}",
            "tips": "Ensure you have a valid termination condition to avoid infinite loops."
          },
          {
            "id": 2,
            "heading": "While Loop",
            "content": "The 'while' loop is used when the number of iterations is unknown, and the loop continues until a specified condition becomes false.",
            "code": "int i = 0;\nwhile (i < 5) {\n  Console.WriteLine(i);\n  i++;\n}",
            "tips": "Be careful with the condition; it should eventually evaluate to 'false' to stop the loop."
          },
          {
            "id": 3,
            "heading": "Do-While Loop",
            "content": "The 'do-while' loop is similar to the 'while' loop, but it guarantees that the block of code will execute at least once, even if the condition is false.",
            "code": "int i = 0;\ndo {\n  Console.WriteLine(i);\n  i++;\n} while (i < 5);",
            "tips": "Use the 'do-while' loop when you need to execute the code at least once before checking the condition."
          },
          {
            "id": 4,
            "heading": "Foreach Loop",
            "content": "The 'foreach' loop is used to iterate over collections like arrays, lists, and other enumerable objects.",
            "code": "int[] numbers = {1, 2, 3, 4, 5};\nforeach (int number in numbers) {\n  Console.WriteLine(number);\n}",
            "tips": "The 'foreach' loop is great for iterating through collections but doesn't allow modification of the collection elements during iteration."
          }
        ]
      }
      
      
    
  

  ]